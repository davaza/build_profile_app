{"version":3,"sources":["components/Main.tsx","Actions/Consts.ts","Actions/SessionActions.ts","components/Message.tsx","components/Preloader.tsx","components/Login.tsx","Containers/LoginContainer.tsx","components/Logout.tsx","Containers/LogoutContainer.tsx","components/Profile.tsx","helpers/getData.ts","helpers/checkResponse.ts","Actions/ProfileActions.ts","Containers/ProfileContainer.tsx","components/News.tsx","Actions/NewsActions.ts","Containers/NewsContainer.tsx","Containers/PrivateRoute.tsx","Containers/EnterExitContainer.tsx","App.tsx","Reducers/session.ts","Reducers/profile.ts","Reducers/news.ts","Reducers/index.ts","store/configureStore.js","index.tsx"],"names":["Main","ActionTypes","AsyncActionTypes","UrlTypes","SessionActions","dispatch","validation","loginData","cb","type","LOGIN","BEGIN","bodyParams","email","login","password","pass","options","headers","method","body","JSON","stringify","fetch","URL_LOGIN","then","response","status","Promise","resolve","FAILURE","statusText","json","data","undefined","id","SUCCESS","payload","name","message","INCORRECT_AUTH","logout","LOGOUT","Message","msg","className","Preloader","role","Login","state","redirectToPreviousRoute","onbtnClickHandler","e","preventDefault","props","actions","setState","handleChangeLogin","value","currentTarget","handleChangePass","this","location","loading","from","pathname","to","htmlFor","onChange","placeholder","onClick","React","Component","LoginCon","connect","session","Logout","LogoutCon","Profile","getProfile","profile","userInfo","city","languages","map","item","i","key","social","href","link","target","rel","width","alt","label","src","getData","url","a","ok","Error","console","warn","checkResponse","res","ProfileActions","PROFILE","URL_ROOT","URL_USER_INFO","errorMsg","catch","error","ProfileCon","News","getNews","news","newsData","title","text","length","NewsActions","NEWS","URL_NEWS","NewsCon","PrivateRouteCon","checkAuth","component","rest","render","EnterExitCon","App","exact","path","NewsContainer","LoginContainer","LogoutContainer","ProfileContainer","initialState","failure","user","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","appStore","document","getElementById"],"mappings":"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","file":"static/js/main.1686bb71.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function Main() {\r\n  return (\r\n    <div>\r\n      <h2>Главная</h2>\r\n    </div>\r\n  )\r\n}\r\n","import { SessionActions } from \"./SessionActions\";\r\nimport { ProfileActions } from \"./ProfileActions\";\r\nimport { NewsActions } from \"./NewsActions\";\r\n\r\nexport enum ActionTypes {\r\n    LOGIN = 'ACTION_LOGIN',\r\n    LOGOUT = 'ACTION_LOGOUT',\r\n    PROFILE = \"ACTION_PROFILE\",\r\n    NEWS = \"ACTION_NEWS\"\r\n}\r\n\r\nexport enum AsyncActionTypes {\r\n    BEGIN = '_BEGIN',\r\n    SUCCESS = '_SUCCESS',\r\n    FAILURE = '_FAILURE',\r\n    INCORRECT_AUTH = '_INCORRECT_AUTH',\r\n}\r\n\r\nexport enum UrlTypes {\r\n    URL_ROOT = 'https://mysterious-reef-29460.herokuapp.com/api/v1',\r\n    URL_USER_INFO = 'user-info',\r\n    URL_LOGIN = 'https://mysterious-reef-29460.herokuapp.com/api/v1/validate',\r\n    URL_NEWS = 'news'\r\n}\r\n\r\nexport interface IDispatchSessionProps {\r\n    actions: SessionActions;\r\n}\r\n\r\nexport interface IDispatchProfileProps {\r\n    actions: ProfileActions;\r\n}\r\n\r\nexport interface IDispatchNewsProps {\r\n    actions: NewsActions;\r\n}\r\n\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { IActionType } from \"../common\";\r\nimport { ActionTypes, AsyncActionTypes, UrlTypes } from \"./Consts\";\r\nimport { ILoginData } from \"./Models\";\r\n\r\nexport class SessionActions {\r\n    constructor(private dispatch: Dispatch<IActionType>) { }\r\n    validation = (loginData: ILoginData, cb: Function) => {\r\n        this.dispatch({ type: `${ActionTypes.LOGIN}${AsyncActionTypes.BEGIN}` });\r\n        var bodyParams = {\r\n            email: loginData.login,\r\n            password: loginData.pass\r\n        }\r\n        const options = {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'POST',\r\n            body: JSON.stringify(bodyParams)\r\n        }\r\n\r\n        fetch(UrlTypes.URL_LOGIN, options)\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return Promise.resolve(response)\r\n                } else {\r\n                    this.dispatch({ type: `${ActionTypes.LOGIN}${AsyncActionTypes.FAILURE}` });\r\n                    throw response.statusText;\r\n                }\r\n            })\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                if (data.status === \"ok\" && data.data.id !== undefined) {\r\n                    this.dispatch({\r\n                        type: `${ActionTypes.LOGIN}${AsyncActionTypes.SUCCESS}`,\r\n                        payload: { name: \"TEST\", id: data.data.id }\r\n                    });\r\n                    cb();\r\n                }\r\n                else if (data.status === \"err\" && data.message === \"wrong_email_or_password\") {\r\n                    // eslint-disable-next-line no-throw-literal\r\n                    this.dispatch({ type: `${ActionTypes.LOGIN}${AsyncActionTypes.INCORRECT_AUTH}` });\r\n                } else {\r\n                    this.dispatch({ type: `${ActionTypes.LOGIN}${AsyncActionTypes.FAILURE}` });\r\n                }\r\n            });\r\n\r\n    };\r\n    logout = (cb: Function) => {\r\n        this.dispatch({ type: `${ActionTypes.LOGOUT}` });\r\n        cb();\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Message({ msg }: { msg: string }) {\r\n  return <div className=\"alert alert-danger\">{msg}</div>;\r\n}\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport function Preloader() {\r\n  return <div className=\"spinner-border\" role=\"status\">\r\n    <span className=\"sr-only\">Loading...</span>\r\n  </div>\r\n}\r\n","import React from \"react\";\r\nimport { IDispatchSessionProps } from \"../Actions/Consts\";\r\nimport { ILoginData } from \"../Actions/Models\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { ILoginCheckState } from \"../common\";\r\nimport { Message } from \"./Message\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\ninterface ILoginProps {\r\n  checkAuth?: boolean;\r\n  location?: any;\r\n  message?: string;\r\n  loading?: boolean;\r\n}\r\ntype TLoginProps = IDispatchSessionProps & ILoginProps;\r\ntype TLoginState = ILoginData & ILoginCheckState;\r\n\r\nexport class Login extends React.Component<TLoginProps, TLoginState> {\r\n  /**\r\n   *Обработчик проверки логина и пароля с формы\r\n   */\r\n  state: TLoginState = {\r\n    login: \"\",\r\n    pass: \"\",\r\n    redirectToPreviousRoute: false,\r\n  };\r\n\r\n  onbtnClickHandler = (e: any) => {\r\n    e.preventDefault();\r\n    const { login, pass } = this.state;\r\n    this.props.actions.validation({ login, pass }, () => {\r\n      this.setState({ redirectToPreviousRoute: true });\r\n    });\r\n  };\r\n\r\n  handleChangeLogin = (e: any) => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({ login: value });\r\n  };\r\n\r\n  handleChangePass = (e: any) => {\r\n    const { value } = e.currentTarget;\r\n    this.setState({ pass: value });\r\n  };\r\n\r\n  render() {\r\n    const { login, pass, redirectToPreviousRoute } = this.state;\r\n    const { location, message, loading } = this.props;\r\n    const { from } = location.state || { from: { pathname: \"/profile\" } };\r\n\r\n    if (redirectToPreviousRoute) {\r\n      return <Redirect to={from} />;\r\n    }\r\n    return (\r\n      <div className=\"form-auth-wrap\">\r\n        <form className=\"form-auth clearfix\">\r\n          <h2>Вход</h2>\r\n          <label htmlFor=\"login\" className=\"clearfix\">\r\n            Логин\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"login\"\r\n            onChange={this.handleChangeLogin}\r\n            placeholder=\"Ваш логин\"\r\n            value={login}\r\n          />\r\n          <label htmlFor=\"pass\" className=\"clearfix\">\r\n            Пароль\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"pass\"\r\n            onChange={this.handleChangePass}\r\n            placeholder=\"Ваш пароль\"\r\n            value={pass}\r\n          />\r\n          <button onClick={this.onbtnClickHandler}>Войти</button>\r\n        </form>\r\n        { loading && <Preloader />}\r\n        { message && <Message msg={message || \"\"} />}\r\n      </div >\r\n    );\r\n  }\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { IDispatchSessionProps } from \"../Actions/Consts\";\r\nimport { SessionActions } from \"../Actions/SessionActions\";\r\nimport { IActionType } from \"../common\";\r\nimport { Login } from \"../components/Login\";\r\nimport { IStateProps } from \"../common\";\r\nimport { IStoreState } from \"../Reducers/session\";\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<IActionType>): IDispatchSessionProps {\r\n  return {\r\n    actions: new SessionActions(dispatch),\r\n  };\r\n}\r\n\r\nfunction mapStateToProps(state: IStoreState): IStateProps {\r\n  return {\r\n    message: state.session.message,\r\n    loading: state.session.loading,\r\n  };\r\n}\r\n\r\nconst LoginCon = connect(mapStateToProps, mapDispatchToProps)(Login);\r\n\r\nexport { LoginCon as LoginContainer };\r\n","import React from \"react\";\r\nimport { IDispatchSessionProps } from \"../Actions/Consts\";\r\nimport { ILoginCheckState } from \"../common\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ninterface ILoginProps {\r\n  checkAuth?: boolean;\r\n}\r\n\r\ntype TLoginProps = IDispatchSessionProps & ILoginProps;\r\n\r\nexport class Logout extends React.Component<TLoginProps, ILoginCheckState> {\r\n  state: ILoginCheckState = {\r\n    redirectToPreviousRoute: false,\r\n  };\r\n\r\n  onbtnClickHandler = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.actions.logout(() => {\r\n      this.setState({ redirectToPreviousRoute: true });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { redirectToPreviousRoute } = this.state;\r\n    if (redirectToPreviousRoute) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n    return (\r\n      <div className=\"form-auth-wrap\">\r\n        <form className=\"form-auth clearfix\">\r\n          <button onClick={this.onbtnClickHandler}>Выйти</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { IDispatchSessionProps } from \"../Actions/Consts\";\r\nimport { SessionActions } from \"../Actions/SessionActions\";\r\nimport { IActionType } from \"../common\";\r\nimport { Logout } from \"../components/Logout\";\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<IActionType>): IDispatchSessionProps {\r\n  return {\r\n    actions: new SessionActions(dispatch),\r\n  };\r\n}\r\n\r\nconst LogoutCon = connect(null, mapDispatchToProps)(Logout);\r\n\r\nexport { LogoutCon as LogoutContainer };\r\n","import React from \"react\";\r\nimport { IStoreState } from \"../Reducers/profile\";\r\nimport { IDispatchProfileProps } from \"../Actions/Consts\";\r\nimport { Message } from './Message';\r\n\r\nexport class Profile extends React.Component<IStoreState & IDispatchProfileProps>{\r\n  componentDidMount() {\r\n    this.props.actions.getProfile('1');\r\n  };\r\n  render() {\r\n    const { profile } = this.props;\r\n    const { userInfo, message } = profile;\r\n    return (<div>\r\n      <h2>Профиль</h2>\r\n      {userInfo &&\r\n        <div className=\"wrap-info\">\r\n          <p>Город: {userInfo.city}</p>\r\n          <ul className=\"list\">\r\n            Знание языков:\r\n            {\r\n              userInfo.languages.map((item, i) => <li key={i}>+{item}</li>)\r\n            }\r\n          </ul>\r\n          <ul className=\"list\">\r\n            Ссылки:\r\n            {\r\n              userInfo.social.map((item, i) => <li key={i}>+<a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"24\" alt={item.label} src={`./social/${item.label}.png`} /></a></li>)\r\n            }\r\n          </ul>\r\n        </div>\r\n      }\r\n      {\r\n        (message === 'user_not_found') && <Message msg=\"Не найден пользователь\" />\r\n      }\r\n\r\n      <p>{profile.loading && \"Загрузка\"}</p>\r\n    </div>)\r\n  }\r\n}\r\n\r\n","export const getData = async (url: string) => {\r\n    try {\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            const json = await response.json();\r\n            return json;\r\n        } else {\r\n            throw new Error(response.statusText);\r\n        }\r\n    } catch (err) {\r\n        console.warn('getData Error: ', err);\r\n    }\r\n}","export function checkResponse(res: any) {\r\n    if (res.status === 'ok') {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport { IActionType } from \"../common\";\r\nimport { ActionTypes, AsyncActionTypes, UrlTypes } from \"./Consts\";\r\nimport { getData } from \"../helpers/getData\";\r\nimport { checkResponse } from \"../helpers/checkResponse\";\r\n\r\nexport class ProfileActions {\r\n    constructor(private dispatch: Dispatch<IActionType>) { }\r\n    getProfile = (id: string) => {\r\n        this.dispatch({ type: `${ActionTypes.PROFILE}${AsyncActionTypes.BEGIN}` });\r\n\r\n        getData(`${UrlTypes.URL_ROOT}/${UrlTypes.URL_USER_INFO}/${id}`).then(response => {\r\n            if (checkResponse(response)) {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.PROFILE}${AsyncActionTypes.SUCCESS}`,\r\n                    payload: response.data\r\n                });\r\n\r\n            } else {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.PROFILE}${AsyncActionTypes.FAILURE}`,\r\n                    payload: { errorMsg: response.message }\r\n                });\r\n            }\r\n        })\r\n            .catch(error => {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.PROFILE}${AsyncActionTypes.FAILURE}`,\r\n                    payload: \"Сервер временно не доступен\",\r\n                });\r\n            });\r\n    };\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Profile } from \"../components/Profile\";\r\nimport { IActionType } from \"../common\";\r\nimport { IStoreState as IStoreStateProfile } from \"../Reducers/profile\";\r\nimport { IDispatchProfileProps } from \"../Actions/Consts\"\r\nimport { ProfileActions } from \"../Actions/ProfileActions\"\r\n\r\nfunction mapStateToProps(state: IStoreStateProfile): IStoreStateProfile {\r\n  return {\r\n    profile: state.profile,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<IActionType>): IDispatchProfileProps {\r\n  return {\r\n    actions: new ProfileActions(dispatch),\r\n  };\r\n}\r\n\r\nconst ProfileCon = connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n\r\nexport { ProfileCon as ProfileContainer };\r\n","import React from \"react\";\r\nimport { IStoreStateNews } from \"../Reducers/news\";\r\nimport { IDispatchNewsProps } from \"../Actions/Consts\";\r\n\r\nexport class News extends React.Component<IStoreStateNews & IDispatchNewsProps>{\r\n  componentDidMount() {\r\n    this.props.actions.getNews();\r\n  };\r\n  render() {\r\n    const { news } = this.props;\r\n    const { newsData } = news;\r\n    return (<div>\r\n      <h2>Новости</h2>\r\n      {newsData &&\r\n        <div className=\"wrap-info\">\r\n          <ul className=\"list\">\r\n            {newsData.map((item, i) => <li key={i}>\r\n              <h3>{item.title}</h3>\r\n              <p>{item.text}</p>\r\n            </li>)}\r\n          </ul>\r\n          <p>Всего новостей: {newsData.length}</p>\r\n        </div>\r\n      }\r\n      <p>{news.loading && \"Загрузка\"}</p>\r\n    </div>)\r\n  }\r\n}\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { IActionType } from \"../common\";\r\nimport { ActionTypes, AsyncActionTypes, UrlTypes } from \"./Consts\";\r\nimport { getData } from \"../helpers/getData\";\r\nimport { checkResponse } from \"../helpers/checkResponse\";\r\n\r\nexport class NewsActions {\r\n    constructor(private dispatch: Dispatch<IActionType>) { }\r\n    getNews = () => {\r\n        this.dispatch({ type: `${ActionTypes.NEWS}${AsyncActionTypes.BEGIN}` });\r\n\r\n        getData(`${UrlTypes.URL_ROOT}/${UrlTypes.URL_NEWS}`).then(response => {\r\n            if (checkResponse(response)) {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.NEWS}${AsyncActionTypes.SUCCESS}`,\r\n                    payload: response.data\r\n                });\r\n\r\n            } else {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.NEWS}${AsyncActionTypes.FAILURE}`,\r\n                    payload: { errorMsg: response.message }\r\n                });\r\n            }\r\n        })\r\n            .catch(error => {\r\n                this.dispatch({\r\n                    type: `${ActionTypes.NEWS}${AsyncActionTypes.FAILURE}`,\r\n                    payload: \"Сервер временно не доступен\",\r\n                });\r\n            });\r\n    };\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { News } from \"../components/News\";\r\nimport { IActionType } from \"../common\";\r\nimport { IStoreStateNews } from \"../Reducers/news\";\r\nimport { IDispatchNewsProps } from \"../Actions/Consts\"\r\nimport { NewsActions } from \"../Actions/NewsActions\"\r\n\r\nfunction mapStateToProps(state: IStoreStateNews): IStoreStateNews {\r\n  return {\r\n    news: state.news,    \r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<IActionType>): IDispatchNewsProps {\r\n  return {\r\n    actions: new NewsActions(dispatch),\r\n  };\r\n}\r\n\r\nconst NewsCon = connect(mapStateToProps, mapDispatchToProps)(News);\r\n\r\nexport { NewsCon as NewsContainer };\r\n","import * as React from \"react\";\r\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { IStateProps } from \"../common\";\r\nimport { IStoreState } from \"../Reducers/session\";\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n  // tslint:disable-next-line:no-any\r\n  component: any;\r\n  checkAuth?: boolean;\r\n}\r\n\r\nconst PrivateRoute = (props: PrivateRouteProps) => {\r\n  const { component: Component, checkAuth, location, ...rest } = props;\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        checkAuth ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: props.location },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state: IStoreState): IStateProps {\r\n  return {\r\n    checkAuth: state.session.checkAuth,\r\n  };\r\n}\r\n\r\nconst PrivateRouteCon = connect(mapStateToProps, null)(PrivateRoute);\r\n\r\nexport { PrivateRouteCon as PrivateRoute };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { IStateProps } from \"../common\";\r\nimport { IStoreState } from \"../Reducers/session\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst EnterExit = (props: any) => {\r\n  return (\r\n    <div>\r\n      {props.checkAuth ? (\r\n        <Link to=\"/logout\">Выход</Link>\r\n      ) : (\r\n        <Link to=\"/login\">Вход</Link>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state: IStoreState): IStateProps {\r\n  return { checkAuth: state.session.checkAuth };\r\n}\r\n\r\nconst EnterExitCon = connect(mapStateToProps, null)(EnterExit);\r\n\r\nexport { EnterExitCon as EnterExitContainer };\r\n","import * as React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Main } from \"./components/Main\";\nimport { LoginContainer } from \"./Containers/LoginContainer\";\nimport { LogoutContainer } from \"./Containers/LogoutContainer\";\nimport { ProfileContainer } from \"./Containers/ProfileContainer\";\nimport { NewsContainer } from \"./Containers/NewsContainer\";\nimport \"./App.css\";\nimport { PrivateRoute } from \"./Containers/PrivateRoute\";\nimport { EnterExitContainer } from \"./Containers/EnterExitContainer\";\n/**\n * Пропсы для передачи экшенов.\n * @prop {Actions} actions Экшены для работы приложения.\n */\n\n// interface IStateApp {\n//   checkClickLogin: boolean;\n// }\n\n\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Главная</Link>\n          </li>\n          <li>\n            <div className=\"test\">\n              <EnterExitContainer />\n            </div>\n          </li>\n          <li>\n            <Link to=\"/news\">Новости</Link>\n          </li>\n          <li>\n            <Link to=\"/profile\">Профиль</Link>\n          </li>\n        </ul>\n        <hr />\n        <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n          <Route path=\"/news\" component={NewsContainer}>\n          </Route>\n          <Route path=\"/login\" component={LoginContainer} />\n          <Route path=\"/logout\" component={LogoutContainer} />\n          <PrivateRoute path=\"/profile\" component={ProfileContainer} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport { App };\n","import { IActionType } from '../common'\r\nimport { ActionTypes, AsyncActionTypes } from '../Actions/Consts';\r\n\r\nexport type TSession={\r\n    checkAuth: boolean;\r\n    loading?: boolean;\r\n    failure?: boolean;\r\n    user?: { name: string };\r\n    message?: string;\r\n}\r\n\r\nexport interface IStoreState {\r\n    session: TSession\r\n}\r\n\r\n\r\nconst initialState = {\r\n    get state(): IStoreState {\r\n        let session={\r\n            checkAuth: false,\r\n            loading: false,\r\n            failure: false,\r\n            user: undefined,\r\n            message: \"\"\r\n        }\r\n        return {session};\r\n    }\r\n}\r\n\r\nexport default function reducer(state: IStoreState = initialState.state, action: IActionType) {\r\n    switch (action.type) {\r\n        case `${ActionTypes.LOGIN}${AsyncActionTypes.BEGIN}`:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case `${ActionTypes.LOGIN}${AsyncActionTypes.SUCCESS}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                checkAuth: true,\r\n                user: {\r\n                    name: action.payload.name,\r\n                    id: action.payload.id\r\n                },\r\n                message: \"\"\r\n            }\r\n        case `${ActionTypes.LOGIN}${AsyncActionTypes.INCORRECT_AUTH}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                checkAuth: false,\r\n                message: \"Имя пользователя или пароль введены не верно\"\r\n            }\r\n        case `${ActionTypes.LOGIN}${AsyncActionTypes.FAILURE}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                checkAuth: false,\r\n                failure: true,\r\n                message: \"Проблемы с доступом к серверу\"\r\n            }\r\n        case `${ActionTypes.LOGOUT}`:\r\n            return {\r\n                ...state,\r\n                checkAuth: false,\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n\r\n","import { IActionType } from '../common'\r\nimport { ActionTypes, AsyncActionTypes } from '../Actions/Consts';\r\n\r\nexport type TUserInfo = {\r\n\r\n    city: string;\r\n    languages: string[];\r\n    social: {\r\n        label: string;\r\n        link: string;\r\n    }[];\r\n}\r\n\r\nexport interface IStoreState {\r\n    profile: {\r\n        loading: boolean;\r\n        failure: boolean;\r\n        message: string;\r\n        userInfo: TUserInfo\r\n    }\r\n}\r\n\r\n// export interface IStoreProps {\r\n//     loading: boolean;\r\n//     failure: boolean;\r\n//     message: string;\r\n//     userInfo: TUserInfo;\r\n//     //profileProps: any\r\n\r\n// }\r\n\r\n\r\nconst initialState = {\r\n    get state(): IStoreState {\r\n        let profile = {\r\n            loading: false,\r\n            failure: false,\r\n            message: '',\r\n            userInfo: {\r\n                city: \"\",\r\n                languages: [],\r\n                social: []\r\n            }\r\n        }\r\n        return { profile };\r\n    }\r\n}\r\n\r\nexport default function reducer(state: IStoreState = initialState.state, action: IActionType) {\r\n    switch (action.type) {\r\n        case `${ActionTypes.PROFILE}${AsyncActionTypes.BEGIN}`:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case `${ActionTypes.PROFILE}${AsyncActionTypes.SUCCESS}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                userInfo: {\r\n                    city: action.payload.city,\r\n                    languages: action.payload.languages,\r\n                    social: action.payload.social\r\n                },\r\n            };\r\n        case `${ActionTypes.PROFILE}${AsyncActionTypes.FAILURE}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                failure: true,\r\n                message: action.payload.errorMsg\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n\r\n","import { IActionType } from '../common'\r\nimport { ActionTypes, AsyncActionTypes } from '../Actions/Consts';\r\n\r\nexport type TNews = {\r\n    id: number;\r\n    title: string;\r\n    text: string;\r\n}\r\n\r\n\r\nexport interface IStoreStateNews {\r\n    news: {\r\n        loading: boolean;\r\n        failure: boolean;\r\n        message: string;\r\n        newsData: TNews[]\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    get state(): IStoreStateNews {\r\n        let news = {\r\n            loading: false,\r\n            failure: false,\r\n            message: '',\r\n            newsData: []\r\n        }\r\n        return { news };\r\n    }\r\n}\r\n\r\nexport default function reducer(state: IStoreStateNews = initialState.state, action: IActionType) {\r\n    switch (action.type) {\r\n        case `${ActionTypes.NEWS}${AsyncActionTypes.BEGIN}`:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case `${ActionTypes.NEWS}${AsyncActionTypes.SUCCESS}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                newsData: action.payload\r\n            };\r\n        case `${ActionTypes.NEWS}${AsyncActionTypes.FAILURE}`:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                failure: true,\r\n                message: action.payload.errorMsg\r\n            }\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n\r\n","import { combineReducers } from 'redux'\r\nimport session from './session'\r\nimport profile from './profile'\r\nimport news from './news'\r\n\r\nexport default combineReducers({\r\n    session,\r\n    profile,\r\n    news\r\n})\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n// import { reducer } from \"../Reducers/reduser\";\r\nimport  reducer from \"../Reducers\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nexport { store as appStore };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { App } from \"./App\";\nimport { appStore } from \"./store/configureStore\";\n\nReactDOM.render(\n  <Provider store={appStore}>    \n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}